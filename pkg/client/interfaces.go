package client

import (
	"encoding/xml"
	"errors"
	"reflect"

	"github.com/google/uuid"
)

type SOAPInterface interface {
	toXml() ([]byte, error)
}

type genericReadableRow struct {
	XMLName xml.Name      `xml:"apir:GenericReadableRow"`
	Values  []interface{} `xml:"apir:Values>apir:anyType"`
}

func toGenericReadableRows(rows interface{}) ([]genericReadableRow, error) {
	var interfaces []interface{}
	rv := reflect.ValueOf(rows)
	if rv.Kind() == reflect.Slice {
		for i := 0; i < rv.Len(); i++ {
			interfaces = append(interfaces, rv.Index(i).Interface())
		}
	} else {
		return nil, errors.New("not a slice")
	}
	var genericReadableRows []genericReadableRow
	for _, row := range interfaces {
		var values []interface{}
		fields := reflect.ValueOf(row).NumField()
		for i := 0; i < fields; i++ {
			value := reflect.ValueOf(row).Field(i)
			values = append(values, value.Interface())
		}
		genericReadableRows = append(genericReadableRows, genericReadableRow{Values: values})
	}
	return genericReadableRows, nil
}

type DynamicCategoryType uint8

const (
	DynamicCategoryType_ComputerModel DynamicCategoryType = 1
	DynamicCategoryType_Device        DynamicCategoryType = 2
	DynamicCategoryType_Application   DynamicCategoryType = 4
	DynamicCategoryType_Any           DynamicCategoryType = 255
)

type DynamicCategoryOriginType uint8

const (
	DynamicCategoryOriginType_Automatic DynamicCategoryOriginType = 1
	DynamicCategoryOriginType_Manual    DynamicCategoryOriginType = 2
	DynamicCategoryOriginType_Any       DynamicCategoryOriginType = 255
)

// DynamicCategory represents a dynamic category in WSUS.
// Only ID, Name, and Type are required.
// ID should be a valid UUID (generated by github.com/google/uuid)
// Type should be one of the DynamicCategoryType constants.
// If supplied, Origin should be one of the DynamicCategoryOriginType constants.
// It is recommended to only supply the required fields.
type DynamicCategory struct {
	XMLName       xml.Name                  `xml:"apir:AddDynamicCategory"`
	ID            uuid.UUID                 `xml:"apir:id"`
	Name          string                    `xml:"apir:name"`
	Type          DynamicCategoryType       `xml:"apir:type"`
	Origin        DynamicCategoryOriginType `xml:"apir:origin omitempty"`
	IsSyncEnabled bool                      `xml:"apir:isSyncEnabled omitempty"`
	DiscoveryTime int64                     `xml:"apir:discoveryTime omitempty"`
	TargetId      int                       `xml:"apir:targetId omitempty"`
}

func (d DynamicCategory) toXml() ([]byte, error) {
	return xml.Marshal(d)
}

type DynamicCategories struct {
	XMLName    xml.Name          `xml:"apir:AddDynamicCategories"`
	Categories []DynamicCategory `xml:"apir:categories"`
}

func (d DynamicCategories) toXml() ([]byte, error) {
	temp, err := xml.Marshal(d)
	if err != nil {
		return nil, err
	}
	return []byte("<apir:AddDynamicCategories><apir:categories>" + string(temp) + "</apir:categories></apir:AddDynamicCategories>"), nil
}

func (d DynamicCategories) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	rows, err := toGenericReadableRows(d.Categories)
	if err != nil {
		return err
	}
	return e.Encode(rows)
}
