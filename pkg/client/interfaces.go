package client

import (
	"encoding/xml"
	"errors"
	"reflect"

	"github.com/google/uuid"
)

type SOAPInterface interface {
	toXml() ([]byte, error)
}

type genericReadableRow struct {
	XMLName xml.Name      `xml:"apir:GenericReadableRow"`
	Values  []interface{} `xml:"apir:Values>apir:anyType"`
}

func toGenericReadableRows(rows interface{}) ([]genericReadableRow, error) {
	var interfaces []interface{}
	rv := reflect.ValueOf(rows)
	if rv.Kind() == reflect.Slice {
		for i := 0; i < rv.Len(); i++ {
			interfaces = append(interfaces, rv.Index(i).Interface())
		}
	} else {
		return nil, errors.New("not a slice")
	}
	var genericReadableRows []genericReadableRow
	for _, row := range interfaces {
		var values []interface{}
		fields := reflect.ValueOf(row).NumField()
		for i := 0; i < fields; i++ {
			value := reflect.ValueOf(row).Field(i)
			values = append(values, value.Interface())
		}
		genericReadableRows = append(genericReadableRows, genericReadableRow{Values: values})
	}
	return genericReadableRows, nil
}

type DynamicCategoryType uint8

const (
	DynamicCategoryType_ComputerModel DynamicCategoryType = 1
	DynamicCategoryType_Device        DynamicCategoryType = 2
	DynamicCategoryType_Application   DynamicCategoryType = 4
	DynamicCategoryType_Any           DynamicCategoryType = 255
)

type DynamicCategoryOriginType uint8

const (
	DynamicCategoryOriginType_Automatic DynamicCategoryOriginType = 1
	DynamicCategoryOriginType_Manual    DynamicCategoryOriginType = 2
	DynamicCategoryOriginType_Any       DynamicCategoryOriginType = 255
)

// DynamicCategory represents a dynamic category in WSUS.
//
// Only ID, Name, and Type are required.
//
// ID should be a valid UUID (generated by github.com/google/uuid).
//
// Type should be one of the DynamicCategoryType constants.
//
// If supplied, Origin should be one of the DynamicCategoryOriginType constants.
//
// It is recommended to only supply the required fields.
type DynamicCategoryInterface struct {
	XMLName       xml.Name                  `xml:"apir:AddDynamicCategory"`
	ID            uuid.UUID                 `xml:"apir:id"`
	Name          string                    `xml:"apir:name"`
	Type          DynamicCategoryType       `xml:"apir:type"`
	Origin        DynamicCategoryOriginType `xml:"apir:origin omitempty"`
	IsSyncEnabled bool                      `xml:"apir:isSyncEnabled omitempty"`
	DiscoveryTime int64                     `xml:"apir:discoveryTime omitempty"`
	TargetId      int                       `xml:"apir:targetId omitempty"`
}

func (d DynamicCategoryInterface) toXml() ([]byte, error) {
	return xml.Marshal(d)
}

// DynamicCategories represents a list of dynamic categories.
//
// This is used to add multiple dynamic categories at once
type DynamicCategoriesInterface struct {
	XMLName    xml.Name                   `xml:"apir:AddDynamicCategories"`
	Categories []DynamicCategoryInterface `xml:"apir:categories"`
}

func (d DynamicCategoriesInterface) toXml() ([]byte, error) {
	temp, err := xml.Marshal(d)
	if err != nil {
		return nil, err
	}
	return []byte("<apir:AddDynamicCategories><apir:categories>" + string(temp) + "</apir:categories></apir:AddDynamicCategories>"), nil
}

func (d DynamicCategoriesInterface) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	rows, err := toGenericReadableRows(d.Categories)
	if err != nil {
		return err
	}
	return e.Encode(rows)
}

// NewLanguage represents a locale in WSUS.
type NewLanguageInterface struct {
	XMLName       xml.Name `xml:"apir:AddNewLanguage"`
	ID            int      `xml:"apir:newLanguage>apir:LanguageId"`
	ShortLanguage string   `xml:"apir:newLanguage>apir:ShortLanguage"`
	LongLanguage  string   `xml:"apir:newLanguage>apir:LongLanguage"`
	Enabled       bool     `xml:"apir:newLanguage>apir:Enabled"`
}

func (n NewLanguageInterface) toXml() ([]byte, error) {
	return xml.Marshal(n)
}

// AutomaticUpdateApprovalRule is used to apply automatic update approval rules to WSUS.
type AutomaticUpdateApprovalRuleInterface struct {
	XMLName xml.Name `xml:"apir:ApplyAutomaticUpdateApprovalRule"`
	ID      int      `xml:"apir:ruleId"`
}

func (a AutomaticUpdateApprovalRuleInterface) toXml() ([]byte, error) {
	return xml.Marshal(a)
}

// CatalogSiteGetMetadataAndImport is used to get metadata and import update binaries.
type CatalogSiteGetMetadataAndImportInterface struct {
	XMLName             xml.Name  `xml:"apir:CatalogSiteGetMetadataAndImport"`
	ID                  uuid.UUID `xml:"apir:updateId"`
	DownloadFileDigests []byte    `xml:"apir:downloadFileDigests>apir:base64Binary"`
}

func (c CatalogSiteGetMetadataAndImportInterface) toXml() ([]byte, error) {
	return xml.Marshal(c)
}

// InstallApprovalRule is used to create an install approval rule.
type InstallApprovalRuleInterface struct {
	XMLName xml.Name `xml:"apir:CreateInstallApprovalRule"`
	Name    string   `xml:"apir:name"`
}

func (c InstallApprovalRuleInterface) toXml() ([]byte, error) {
	return xml.Marshal(c)
}

// DeleteDynamicCategory is used to delete a dynamic category.
type DeleteDynamicCategoryInterface struct {
	XMLName xml.Name  `xml:"apir:DeleteDynamicCategory"`
	ID      uuid.UUID `xml:"apir:id"`
}

func (d DeleteDynamicCategoryInterface) toXml() ([]byte, error) {
	return xml.Marshal(d)
}

// DeleteInstallApprovalRule is used to delete an install approval rule.
type DeleteInstallApprovalRuleInterface struct {
	XMLName xml.Name `xml:"apir:DeleteInstallApprovalRule"`
	ID      int      `xml:"apir:id"`
}

func (d DeleteInstallApprovalRuleInterface) toXml() ([]byte, error) {
	return xml.Marshal(d)
}

// ExecuteGetSigningCertificate is used to get the WSUS signing certificate.
type ExecuteGetSigningCertificate struct {
	XMLName xml.Name `xml:"apir:ExecuteGetSigningCertificate"`
}

func (e ExecuteGetSigningCertificate) toXml() ([]byte, error) {
	return xml.Marshal(e)
}

// ExecuteReplicaSPDeleteDeployment is used to delete a replica deployment.
type ExecuteReplicaSPDeleteDeployment struct {
	XMLName xml.Name  `xml:"apir:ExecuteReplicaSPDeleteDeployment"`
	ID      uuid.UUID `xml:"apir:id"`
}

func (e ExecuteReplicaSPDeleteDeployment) toXml() ([]byte, error) {
	return xml.Marshal(e)
}

// ExecuteSetSelfSigningCertificate instructs the WSUS server to use a self-signed certificate.
type ExecuteSetSelfSigningCertificate struct {
	XMLName xml.Name `xml:"apir:ExecuteSetSelfSigningCertificate"`
}

func (e ExecuteSetSelfSigningCertificate) toXml() ([]byte, error) {
	return xml.Marshal(e)
}

// ExecuteSetSigningCertificate allows specification of a signing certificate.
// The certificate should be in PFX format.
// It must have a password.
type ExecuteSetSigningCertificate struct {
	XMLName  xml.Name `xml:"apir:ExecuteSetSigningCertificate"`
	Cert     []byte   `xml:"apir:PFXFileContent"`
	Password []byte   `xml:"apir:passwordBytes"`
}

func (e ExecuteSetSigningCertificate) toXml() ([]byte, error) {
	return xml.Marshal(e)
}

// ExecuteSPAcceptEula is used to accept the EULA for an update.
// AdminName should be the CN of the user who "accepted" the EULA.
type ExecuteSPAcceptEula struct {
	XMLName   xml.Name  `xml:"apir:ExecuteSPAcceptEula"`
	ID        uuid.UUID `xml:"apir:id"`
	AdminName string    `xml:"apir:adminName"`
	UpdateID  uuid.UUID `xml:"apir:updateId>apir:updateId"`
	Revision  int       `xml:"apir:updateId>apir:revision"`
}

func (e ExecuteSPAcceptEula) toXml() ([]byte, error) {
	return xml.Marshal(e)
}
